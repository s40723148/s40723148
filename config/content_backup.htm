<h1>Introduction</h1>
<p>機械設計工程系暨精密機械工程科 2019 Spring 網際內容管理課程 (Introduction to Web Content Management Systems Site Development)</p>
<p>倉儲: <a href="https://github.com/mdecourse/wcm2019">https://github.com/mdecourse/wcm2019</a></p>
<p>靜態網頁: <a href="https://mde.tw/wcm2019">https://mde.tw/wcm2019</a></p>
<p>動態網頁: <a href="https://wcm2019.herokuapp.com">https://wcm2019.herokuapp.com</a></p>
<p>網際內容管理課程目標與流程規劃:(<a href="/get_page/downloads/kmol_courses_flowchart_dia_png.7z">kmol_courses_flowchart_dia_png.7z</a>)</p>
<p><img alt="" height="578" src="/get_page/images/wcm.png" width="600"/></p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<h4>107學年教育目標:</h4>
<p>本課程延續五專部計算機概論與四技部計算機程式之教學內容, 探討網際內容管理系統 - <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 之使用及後續應用.</p>
<h4>107-2學期教育目標:</h4>
<p>從 Intel-based 電腦硬體的組裝、安裝操作系統、配置網路連線到設定 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> , 引導學員學習如何運用電腦與網路系統, 自行架構符合機械協同設計流程使用之網際內容管理伺服系統.</p>
<h4>達成學期教育目標之評量方式與標準:</h4>
<p>評分比例:</p>
<p style="padding-left: 30px;">學員出席 (20%)</p>
<p style="padding-left: 30px;">電腦組裝與操作系統安裝 (10%)</p>
<p style="padding-left: 30px;">網路連線配置與設定 (10%)</p>
<p style="padding-left: 30px;">Github 倉儲與 CMSimfly 配置 (30%)</p>
<p style="padding-left: 30px;">CMSimfly 操作 (20%)</p>
<p style="padding-left: 30px;">CMSimfly 開發 (10%)</p>
<p>評分方式:</p>
<p style="padding-left: 30px;">WCM 每週自評與互評表單: <a href="https://goo.gl/forms/gExeWw3JIrenXi453">https://goo.gl/forms/gExeWw3JIrenXi453</a> (只接受 gm.nfu.edu.tw 使用者)</p>
<p style="padding-left: 30px;">學員自我評量<span> (30%)</span></p>
<p style="padding-left: 30px;">分組自我評量 (30%)</p>
<p style="padding-left: 30px;">倉儲歷程查驗 (40%)</p>
<p>教學方式:</p>
<p style="padding-left: 30px;">課堂講授</p>
<p style="padding-left: 30px;">操作錄影</p>
<p style="padding-left: 30px;">學員實習</p>
<p style="padding-left: 30px;">分組報告</p>
<p><br/> <a href="/get_page/%E7%B0%A1%E4%BB%8B/P-Tech.html">Next</a> &gt;&gt; P-Tech</p>
<!-- footer -->
<div class="container">
<div class="row pt-3 mx-auto">
<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --> Copyright ©
<script>
document.write(new Date().getFullYear());
</script>
All rights reserved | This template is made with <i aria-hidden="true" class="icon-heart"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a> <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
</div>
</div>
<!-- for footer -->
<p></p>
<!-- for site wrap -->
<p></p>
<!-- <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script> -->
<script src="/get_page/cmsimde/static/chimper/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery-ui.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/popper.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/owl.carousel.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.stellar.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.countdown.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.magnific-popup.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap-datepicker.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/aos.js"></script>
<p>&lt;!--</p>
<script src="/get_page/cmsimde/static/chimper/js/typed.js"></script>
<script>
                    var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
                    
</script><h1>Brython繪圖</h1><h2>Spur Gears</h2>
<p><!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p></p>
<p><!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
</p>
<p><canvas height="600" id="onegear" width="800"></canvas></p>
<div height="20" id="onegear_div" width="800"></div>
<p><input id="n1" type="text" value="13"/><br/> <input id="n2" type="text" value="11"/><br/> <input id="n3" type="text" value="17"/><br/> <button id="button">Set Number of Gears</button></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd>rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd>rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)

canvas = doc['onegear']
ctx = canvas.getContext("2d")

# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n1"].value.isdigit():
        n17 = int(doc["n1"].value)
    else:
        n17 = 17

    if doc["n2"].value.isdigit():
        n11 = int(doc["n2"].value)
    else:
        n11 = 11

    if doc["n3"].value.isdigit():
        n13 = int(doc["n3"].value)
    else:
        n13 = 13

    # 只使用畫布高度的 80%
    canvas_size = canvas.height*0.4
    r17 = canvas_size*n17/(n17+n11+n13)
    r11 = canvas_size*n11/(n17+n11+n13)
    r13 = canvas_size*n13/(n17+n11+n13)
    # 計算各齒輪中心座標
    x17 = x - r17-r11
    y17 = y

    x11 = x 
    y11 = y

    x13 = x + r11+r13
    y13 = y

    pa = 20
    # 開始繪製齒輪
    # 儲存原有的座標系統
    ctx.save()
    # 平移到齒輪圓心
    ctx.translate(x17, y17)
    # 以齒輪圓心旋轉 90 度, 讓紅色標線在齒輪右側保持水平
    ctx.rotate(90*deg)
    # 平移回原來的座標原點
    ctx.translate(-x17, -y17)
    gear17 = Spur(ctx).Gear(x17, y17, r17, n17, pa, "blue")
    # 回復原有的座標系統
    ctx.restore()

    ctx.save()
    ctx.translate(x11, y11)
    # 中間齒輪轉動 -90 度加上一齒, 可以與左側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n11)
    ctx.translate(-x11, -y11)
    gear11 = Spur(ctx).Gear(x11, y11, r11, n11, pa, "blue")
    ctx.restore()

    ctx.save()
    ctx.translate(x13, y13)
    # 右側齒輪轉動 -90 度加上一齒, 可以與原來標線在左側水平的中間齒輪囓合, 但是目前中間齒輪的標線已經轉了 180 度加或減一次
    # 必須配合兩齒的速比轉換旋轉角, 以便讓中間齒輪與右側齒輪囓合
    ctx.rotate(-90*deg-math.pi/n13+(180*deg+math.pi/n11)*n11/n13)
    ctx.translate(-x13, -y13)
    gear13 = Spur(ctx).Gear(x13, y13, r13, n13, pa, "blue")
    ctx.restore()

setgearnumber(True)

'''
div = doc["onegear_div"]
form = html.FORM()
input1 = html.INPUT(type="text", id="n1", name="n1", value="13")
input2 = html.INPUT(type="text", id="n2", name="n2", value="11")
input3 = html.INPUT(type="text", id="n3", name="n3", value="19")
div <= input1 + html.BR() + input2 + html.BR() + input3
'''
doc['button'].bind('click',setgearnumber)
</script>
</p>
<h2>ROC Flag</h2>
<p><!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p></p>
<p><!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
</p>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
</p>
<h1>近端配置與管理</h1>
<h2>網路連線設定</h2>
<p><span>了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定.</span><br/><br/><span>正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定.</span><br/><br/><span>瀏覽器代理主機設定</span><br/><br/><span>了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定.</span><br/><br/><span>申請 Github 帳號</span><br/><br/><span>利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲.</span></p>
<p></p><h2>配置可攜程式環境</h2>
<p>取得 Windows 10 64 位元環境下的可攜程式環境 (下載  2019_cdb_w5.7z), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟.<br/><br/>以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出.<br/><br/>了解基本的 DOS (Disk Operating System) 指令<br/><br/>C:\&gt; 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為<br/><br/>Y:\&gt;<br/><br/>若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如:<br/><br/>Y:\&gt;cd tmp<br/><br/>表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是<br/><br/>Y:\tmp&gt;<br/><br/>若要再回到 Y 槽的根目錄, 可以使用 cd ..<br/><br/>表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄.<br/><br/>另外, 無論目前位於哪一個子目錄, 也可以使用 cd \<br/><br/>直接回到根目錄.<br/><br/>或者從 Y:\&gt; 直接使用<br/><br/>cd \tmp\repo\ssh\wcm2019<br/><br/>直接從 Y 槽的根目錄, 跳進 Y:\tmp\repo\ssh\wcm2019&gt;<br/><br/>此外, 常用的 DOS 指令有:<br/><br/>dir - 列出目前所在目錄的內容<br/><br/>mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄<br/><br/>cls - clear screen, 清除目前的命令列顯示的內容<br/><br/></p>
<h1>倉儲改版</h1>
<p>建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版<br/><br/>可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令.<br/><br/>建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版.<br/><br/>另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端.<br/><br/>git add<br/><br/>git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容.<br/><br/>git add 在 GIT 架構下, 是對所新增或修改的內容拍快照:<br/><br/>git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add<br/><br/>git commit <br/><br/>git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間.<br/><br/>當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息.<br/><br/>git push<br/><br/>git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲.</p>
<p><br/><br/>靜態 CMSimfly</p>
<p>利用 CMSimfly (https://github.com/chiamingyen/cmsimfly) 內容, 建立自己的 Github Pages 網站<br/><br/>設法利用 <a href="http://mde.tw/wcm2019/content/%E5%AF%A6%E7%BF%92%E9%A0%85%E7%9B%AE%E4%B8%89.html">HTML5 CSS 與 Javascript</a>, 納入與機械設計相關的靜態網頁內容</p>
<p>個人倉儲 : <a href="https://github.com/s40723148/s40723148">https://github.com/s40723148/s40723148</a></p>
<p>分組倉儲 : <a href="https://github.com/mdewcm2019/wcm2019-task-g5">https://github.com/mdewcm2019/wcm2019-task-g5</a></p><h1>系統開發</h1>
<p><img alt="" height="240" src="/images/web_developer_2019_intro.png" width="600"/></p>
<p>(來源: <a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a>)</p>
<h4><span>強化網際內容與系統的可用性</span></h4>
<p><span>網際內容與前端開發</span></p>
<p><span><img alt="" height="1612" src="/images/web_developer_2019_frontend.png" width="600"/></span></p>
<p><span></span></p>
<p><span>(來源: <a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a><span>)</span></span></p>
<p><span>強化內容部分:</span></p>
<p style="padding-left: 30px;">利用 Html5 建立 Github Pages 上的個人網站</p>
<p style="padding-left: 30px;">1. The Essential Guide to HTML5 - Using Games to Learn HTML5 and JavaScript (2018)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4155-4">https://link.springer.com/book/10.1007/978-1-4842-4155-4</a> </p>
<p style="padding-left: 30px;">Source Code: <a href="https://github.com/Apress/essential-guide-html5">https://github.com/Apress/essential-guide-html5</a> </p>
<p style="padding-left: 30px;">Example:<span> </span><a href="http://mde.tw/wcm2019/downloads/essential-guide-html5/Ch04/cannball1.html">./../downloads/essential-guide-html5/Ch04/cannball1.html</a> </p>
<p style="padding-left: 30px;">2. Pro HTML5 Games - Learn to Build your Own Games using HTML5 and JavaScript (2017)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2910-1">https://link.springer.com/book/10.1007/978-1-4842-2910-1</a> </p>
<p style="padding-left: 30px;">Source Code: <a href="https://github.com/apress/pro-html5-games-17">https://github.com/apress/pro-html5-games-17</a> </p>
<p style="padding-left: 30px;">Example:<span> </span><a href="http://mde.tw/wcm2019/downloads/pro-html5-games-17/9781484229095/9781484229095_Ch05/index.html">./../downloads/pro-html5-games-17/9781484229095/9781484229095_Ch05/index.html</a></p>
<p><span>Bootstrape 模板部分:</span></p>
<p style="padding-left: 30px;"><span>Introduction to Bootstrap 4 (2016)</span></p>
<p style="padding-left: 60px;"><span><a href="https://link.springer.com/book/10.1007/978-1-4842-2382-6">https://link.springer.com/book/10.1007/978-1-4842-2382-6</a></span></p>
<p style="padding-left: 30px;"><span>在此一類別所能進行的期末報告, 可以透過組員的協同, 將<br/></span></p>
<div style="padding-left: 30px;"><a href="https://github.com/BlackrockDigital">https://github.com/BlackrockDigital</a></div>
<div style="padding-left: 30px;">與</div>
<div style="padding-left: 30px;"><a href="https://themewagon.com/theme_tag/bootstrap-4-templates/">https://themewagon.com/theme_tag/bootstrap-4-templates/</a></div>
<div style="padding-left: 30px;">各式 Template 導入 CMSimfly, 讓未來的使用者可以根據不同環境需求, 選擇不同的靜態網頁模板.</div>
<div style="padding-left: 30px;"></div>
<div style="padding-left: 30px;"><a href="https://kamranahmed.info/blog/2015/01/02/understanding-scope-in-javascript/">Understanding Scope in Javascript</a></div>
<div style="padding-left: 30px;"><a href="https://kamranahmed.info/blog/2014/12/25/completely-remove-a-file-from-git-history/">How to completely remove files from Github history</a></div>
<div style="padding-left: 30px;"><a href="https://kamranahmed.info/blog/2014/08/07/how-to-structure-your-javascript/">How to structure your Javascript</a></div>
<h4><span>深入了解網際內容管理系統的配置環境</span></h4>
<p><span>網際後端環境提供與開發</span></p>
<p><span><img alt="" height="1682" src="/images/web_developer_2019_backend.png" width="600"/></span></p>
<p><span></span></p>
<p><span>(來源: <a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a><span>)</span></span></p>
<p><span>此類期末報告的任務, 在利用 Virtualbox 中的 Ubuntu 操作系統, 配置一套可以動態啟動的虛擬網際內容管理系統, 並學習如何在虛擬操作系統與實體操作系統中配置 CMSimfly 網際內容管理系統. 相關規劃可以參考: <a href="https://2019wcm.blogspot.com/2019/04/virtualbox.html">https://2019wcm.blogspot.com/2019/04/virtualbox.html</a></span></p>
<p>參考 vdi:<br/><br/>位於雲端的<span> </span><a href="https://drive.google.com/file/d/1bSBdEPVn6IG22cVLpTbY97JY16vjlatz/view?usp=sharing">Ubuntu 18.04_201904.vdi</a><span> </span>(約 9 GB) - 已經配置 Fossil SCM: https 5443, Host-only: 192.168.56.2, https: 443 and 8843 for CMSimfly, Squid Proxy Server.<br/><br/>假如要利用 USB 隨身碟存放上述約 9 GB 的 Ubuntu 18.04 vdi 檔案, 必須將隨身碟格式化為 NTFS, 若採 Fat32 格式, 最大單一檔案必須小於 4 GB.<br/><br/>另外在近端有一類似的檔案, 可提供上課學員下載:<br/><br/><a href="http://wcmg1.kmol.info:88/ub1804_nox.vdi">http://wcmg1.kmol.info:88/ub1804_nox.vdi</a><span> </span>(僅限近端用戶使用 IPv6 協定者下載)</p>
<p>Fossil SCM<br/><br/>如何利用 Fossil SCM, 在 Virtualbox 中的 Ubuntu 18.04-2 (8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁<br/><br/>Ubuntu 18.04 (https://www.ubuntu.com/about/release-cycle), 配置網路連線, 然後架構 uwsgi 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 nginx 伺服無版次管理的 CMSimfly 靜態網頁.</p>
<p><a href="https://medium.com/@kamranahmedse/dns-in-one-picture-d7f4783db06a">DNS in one picture</a></p>
<p>最後則是網際系統開發者的學習路徑圖:</p>
<p><img alt="" height="1078" src="/images/web_developer_2019_devops_roadmap.png" width="600"/></p>
<p></p>
<p><span>(來源: </span><a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a><span>)</span></p>
<h2>程式開發要件</h2>
<p>Git - 分散式版次控制 (含 Fossil SCM) - <a href="https://git-scm.com/book/zh-tw/v2">Pro Git</a>, <a href="http://www.fossil-scm.org/schimpf-book/doc/2ndEdition/fossilbook.pdf">Fossil SCM book.pdf</a>, <a href="https://www.fossil-scm.org/xfer/wiki/Cookbook">Fossil cookbook</a></p>
<p>Basic Terminal Usage (基本終端機操作) - <a href="/downloads/2013_linux_command_line.pdf">2013 Linux Command Line.pdf</a></p>
<p>Data Structures &amp; Algorithms (資料結構與演算法) - <a href="/get_page/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E8%A6%81%E4%BB%B6/Data Structures and Algorithms with Python">2015 Textbook</a>, <a href="https://link.springer.com/book/10.1007/978-3-540-77978-0">2008</a>, <a href="https://link.springer.com/book/10.1007/978-1-4612-0075-8">2001</a>, <a href="/downloads/open_data_structure.pdf">ods.pdf</a></p>
<p>KISS, YAGNI, DRY and <a href="https://siderite.blogspot.com/2017/02/solid-principles-plus-dry-yagni-kiss-final.html">SOLID</a> (Keep It Simple, Stupid, You Aren't Gonna Need It, Don't Repeat Yourself)</p>
<p>Github (含自架 Fossil SCM 系統操作) - <a href="https://lab.github.com/">https://lab.github.com/</a></p>
<p><a href="https://en.wikipedia.org/wiki/Software_versioning">Semantic Versioning</a> (語義版本控制) (<a href="https://semver.org/">2.0.0</a>)</p>
<p><a href="https://en.wikipedia.org/wiki/Secure_Shell">SSH</a> (Secure SHell) - <a href="/get_page/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E8%A6%81%E4%BB%B6/Beginning Ubuntu LTS Server Administration">2008 Beginning Ubuntu LTS Server Administration</a></p>
<p><a href="https://https.cio.gov/apis/">HTTP/HTTPS and APIs</a></p>
<p><a href="https://en.wikipedia.org/wiki/Design_Patterns">Design Patterns</a> - <a href="https://link.springer.com/book/10.1007/978-1-4842-2680-3">2017 Practical Python Design Patterns</a></p>
<p><a href="https://en.wikipedia.org/wiki/Character_encoding">Character Encodings</a> - <a href="https://en.wikipedia.org/wiki/Character_encodings_in_HTML">for HTML</a></p>
<h2>Mobile 網站內容</h2>
<p>參考倉儲: <a href="https://github.com/mdecourse/acmsimfly">https://github.com/mdecourse/acmsimfly</a></p>
<p>參考網站:</p>
<p><a href="http://mde.tw/acmsimfly">http://mde.tw/acmsimfly</a></p>
<p><a href="https://github.com/BlackrockDigital">https://github.com/BlackrockDigital</a></p>
<p><a href="https://themewagon.com/theme_tag/bootstrap-4-templates/">https://themewagon.com/theme_tag/bootstrap-4-templates/</a></p>
<p><a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a> (<a href="https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c">blog</a>)</p>
<p><br/>學習如何使用 CMSimfly, 在網站中加入各種內容 (導入 Bootstrap frontend framework)<br/><br/>使用 Flask, bs4 與 lxml 模組<br/><br/>了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統<br/><br/></p>
<h3>CMSimfly 架構</h3>
<p>CMSimfly 以 Python 3 編寫, 利用 Flask 網路框架可以在伺服器運行, 讓使用者利用瀏覽器擷取動態 WWW 伺服器所送至近端的 html 加上 Javascript 程式碼, 然後在瀏覽器中顯示網際內容編輯器 (採用 tinymce4).</p>
<p>在使用者能夠透過 tinymce4 編輯各 CMSimfly 動態網際頁面之前, CMSimfly 利用 Beautiflysoup 4 對 config/content.htm 進行分頁, 然後將 H1 標註中的文字當作第一階的頁面, H2 與 H3 標註內容則當作第二階與第三階的頁面標題, 而標題與標題之間的 html 與 Javascript 則分別當作各階次頁面的內容.</p>
<p>因此 CMSimfly 可以在任何支援 Python 3 、Flask 與 Beautifulsoup 4 的環境中啟動 WWW 伺服器 (即在近端以 python wsgi.py 執行, 或在遠端以 uwsgi 與 nginx 執行 wsgi.py 中的 application), 接著使用者就可以根據伺服器啟動時所使用電腦的 IP 與埠號進行連線.</p>
<p>使用者連線後, Beautifulsoup 即對 config/content.htm 分頁, 然後根據頁面配置讓使用者在瀏覽器中使用 login 登入, 或者以動態的方式檢視各階次的分頁.</p>
<p>當使用者透過 login 登入 CMSimfly 成功後, 便可以指定頁面進行編輯, 修改後內容將存入 config/content.htm, 而尚未改版前的 content.htm 則改名為 content_backup.htm, 此一功能是防止 CMSimfly 因頁面解讀錯誤時, 誤刪資料時, 使用者可以從 content_backup.htm 取回上一版的資料內容.</p>
<h4>動態轉靜態內容</h4>
<p>由於動態 CMSimfly 只能在 Python3 環境中運行, 而某些免費的雲端服務所提供的 WWW 伺服器僅提供 html 加上 Javascript 伺服, 因此為了讓 CMSimfly 動態系統的內容, 能夠將內容送到這些只提供 WWW 伺服器的系統中執行, CMSimfly 加入 generate_pages 的功能, 也就是根據 config/content.htm 中各頁面的標題與資料, 以 Beautifulsoup4 再結合 lxml 模組, 將 content.htm 疊上各頁面所選定的 css 與其他配置頁面格式的 Javascript, 轉成位於 content 目錄中的靜態網站內容, 此一包含 index.html 的各頁面 html 檔案, 可以在任何只支援 html 伺服器的環境中運行, 例如: Github Pages 或 Fossil SCM 中的 doc 伺服頁面功能.</p>
<p>截至目前的說明, 希望啟動 CMSimfly 動態運行, 需要 <span>Python 3 、Flask 與 Beautifulsoup 4 , 若要將動態內容轉為靜態內容, 則額外需要 lxml 模組.</span></p>
<p><span>Python 3 在隨身系統的模組安裝指令為:</span></p>
<p style="padding-left: 30px;"><span>pip install flask bs4 lxml</span></p>
<p><span>表示要利用 pip 安裝 flask, bs4 與 lxml 模組.</span></p>
<p><span></span></p>
<h3>bs4 應用</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import bs4

filename = "index.html"
with open(filename, "r", encoding="utf-8") as f:
    file_content = f.read()

soup = bs4.BeautifulSoup(file_content, "lxml")

new_content = soup.prettify()
print(new_content)

with open(filename, "w", encoding="utf-8") as f:
    f.write(new_content)

#print(soup.prettify())
</pre>
<h3>套用模板一</h3>
<p><a href="https://themewagon.com/themes/free-html5-bootstrap-4-business-website-template-chimper/">https://themewagon.com/themes/free-html5-bootstrap-4-business-website-template-chimper/</a></p>
<p>採用程式庫:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mattboldt/typed.js">https://github.com/mattboldt/typed.js</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/michalsnik/aos">https://github.com/michalsnik/aos</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/eternicode/bootstrap-datepicker">https://github.com/eternicode/bootstrap-datepicker</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/dimsemenov/Magnific-Popup">https://github.com/dimsemenov/Magnific-Popup</a></p>
<p style="padding-left: 30px;"><a href="http://hilios.github.io/jQuery.countdown/">http://hilios.github.io/jQuery.countdown/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/markdalgleish/stellar.js/">https://github.com/markdalgleish/stellar.js/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/OwlCarousel2/OwlCarousel2">https://github.com/OwlCarousel2/OwlCarousel2</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/twbs/bootstrap/releases/tag/v4.1.3">https://github.com/twbs/bootstrap/releases/tag/v4.1.3</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/FezVrasta/popper.js/">https://github.com/FezVrasta/popper.js/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/jquery/jquery-ui/releases/tag/1.12.1">https://github.com/jquery/jquery-ui/releases/tag/1.12.1</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/jquery/jquery-migrate/releases/tag/3.0.1">https://github.com/jquery/jquery-migrate/releases/tag/3.0.1</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/jquery/jquery/releases/tag/3.3.1">https://github.com/jquery/jquery/releases/tag/3.3.1</a></p>
<p>動態 CMSimfly 仍維持原樣, 但是靜態網頁可以自由選擇頁面模板</p>
<h4>Github Pages:</h4>
<p><a href="http://cpgx.kmol.info/chimper/">http://cpgx.kmol.info/chimper/</a></p>
<p></p>
<h1>Virtual Host</h1>
<p>以下內容主要目的在培養能夠建立 backend 網際可程式化機械設計合成系統的開發人員, 網際前端與後端的開發流程, 可以參考:</p>
<p><a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a><span> (</span><a href="https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c">blog</a><span>)</span></p>
<p><span>前端開發者必須讓網頁能在各種大小與規格的瀏覽裝置中, 正確且友善地顯示內容, 而後端開發者, 則專注於讓近端使用者能夠透過網際介面使用各種與機械設計流程相關的 CAD, CAE, CAM, PDM, 以及各種支援用的數位型錄等.</span></p>
<p>參考 vdi:<br/><br/>位於雲端的 <a href="https://drive.google.com/file/d/1bSBdEPVn6IG22cVLpTbY97JY16vjlatz/view?usp=sharing">Ubuntu 18.04_201904.vdi</a> (約 9 GB) - 已經配置 Fossil SCM: https 5443, Host-only: 192.168.56.2, https: 443 and 8843 for CMSimfly, Squid Proxy Server.<br/><br/>假如要利用 USB 隨身碟存放上述約 9 GB 的 Ubuntu 18.04 vdi 檔案, 必須將隨身碟格式化為 NTFS, 若採 Fat32 格式, 最大單一檔案必須小於 4 GB.<br/><br/>另外在近端有一類似的檔案, 可提供上課學員下載:<br/><br/><a href="http://wcmg1.kmol.info:88/ub1804_nox.vdi">http://wcmg1.kmol.info:88/ub1804_nox.vdi</a> (僅限近端用戶使用 IPv6 協定者下載)</p>
<p>Fossil SCM<br/><br/>如何利用 Fossil SCM, 在 Virtualbox 中的 Ubuntu 18.04-2 (8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁<br/><br/>Ubuntu 18.04 (https://www.ubuntu.com/about/release-cycle), 配置網路連線, 然後架構 uwsgi 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 nginx 伺服無版次管理的 CMSimfly 靜態網頁.</p>
<h2>Virtualbox建立 Ubuntu</h2>
<p><span>利用 Virtualbox 建立虛擬 Ubuntu 18.04 網際內容管理系統伺服主機:</span><br/><span><br/></span><span>1. 安裝最新版的 <a href="https://download.virtualbox.org/virtualbox/6.0.8/VirtualBox-6.0.8-130520-Win.exe">Virtualbox</a></span><br/><span>2. 建立 <a href="https://www.ubuntu.com/download/server/thank-you?version=18.04.2&amp;architecture=amd64">Ubuntu 18.04</a> 虛擬主機</span><br/><span>3. 以網路卡橋接啟動 Ubuntu 伺服器</span><br/><span>4. 以 sudo apt install nginx 安裝 nginx WWW 伺服器</span><br/><span>5. 以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線</span><br/><span>6. 以 Windows 10  下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu</span><br/><span>7. 利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx</span><br/><span>8. 在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi</span><br/><span>9. 在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu.</span><br/><span>10. 將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後.</span><br/><span>11. 在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動.</span><br/><span>12. 完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動.</span></p><h1>期末</h1>
<p>網路連線設定</p>
<p>倉儲改版</p>
<p>Ubuntu 安裝</p><h2>路連線設定練習</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/a4ZainrqBM4" width="560"></iframe></p>
<p>進入網路共和中心,點選<span style="background-color: #ffff00;">變更介面卡設定</span></p>
<p><img alt="" height="632" src="/images/explorer_EGId5aBSrs.png" width="1125"/></p>
<p>選擇目前連線之網路,右鍵 選擇 <span style="background-color: #ffff00;">內容</span></p>
<p><img alt="" height="632" src="/images/explorer_eTBnK53vtJ.png" width="1125"/></p>
<p>開啟IPv6,關閉IPv4,選擇 <span style="background-color: #ffff00;">內容</span></p>
<p><img alt="" height="533" src="/images/dllhost_WFDBJKXwWC.png" width="421"/></p>
<p>在 <span style="background-color: #ffff00;">慣用DNS伺服器</span> 中輸入 2001:000:168::1.按確定</p>
<p><img alt="" height="518" src="/images/dllhost_Po9bnCFyEd.png" width="630"/></p><h2>Ubuntu 安裝練習</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/t3K-Msj-5uA" width="560"></iframe></p>
<h2>期末報告影片</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2urr2152pcY" width="560"></iframe></p>